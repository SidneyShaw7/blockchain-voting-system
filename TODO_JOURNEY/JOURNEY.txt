I probably created this txt file too late, but suddenly I decided that it is actually would be nice to note all my journey. Document my decisions, why I did this not that, why I used this stack but not another.
It's been 3 weeks since I started my fullstack portfolio project, many of my thoughts already gone but I'll do my best to keep up. 

Tue Apr 23
Live and learn. Today I found out about Formik and Yop libraries for React ecosystem. Seems to me it's a relief for the management and validation of forms. I start using it for the EventCreationForm component but as my previous forms (login and register) don't use it, I had to refactor both to keep my coding style the same on every component. Those libraries look easy to implement, not much of a headache.

Try to refactor ready-to-go components with Formik was such a stupid idea, spent hours on it and hated it. Went back to my prev code, might still use Yup for validation, awesome tool.

Thu Apr 25
Didnt like my Formik form at all
Tried to refactor the code to react-hook-from. having such a headache with Yup validation. need debugging, need fixes, need refactoring.

Fri Apr 26
Refactoring refactoring refactoring. Searching the web for fixing my bug I found out that it is actially not my code where a bug, but a library which Im using. TS COMPLAINING, people suggest to downgrade the Yup to prev version, or use yupResolver with the next generic type yupResolver<yup.AnyObjectSchema>. WHY ITS NOT MENTIONED IN DOCS. I dont know, also why do people use buggy libraries and recommend it to each other? It speed ups dev process but debugging is miserable and painfull. 

Decided to refactor the EventCreationForm validation with Zod library, took me 20 mins, easy to use and no bugs compare to Yup.

Mon Apr 29
Making the event slice realised that my code on slices and thunks so much repetetive, decided to refactor all of the slices for easy to use, was not an easy task and Im not sure if I want to do more refactoring anymroe.